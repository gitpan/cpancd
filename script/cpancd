#!/usr/bin/perl -w
my $RCS_Id = '$Id: cpancd.pl,v 1.7 2001-04-13 13:14:55+02 jv Exp $ ';

# Author          : Johan Vromans
# Created On      : Wed Apr 11 14:25:14 2001
# Last Modified By: Johan Vromans
# Last Modified On: Fri Apr 13 13:12:39 2001
# Update Count    : 59
# Status          : Unknown, Use with caution!

################ Common stuff ################

use strict;

use vars qw($VERSION);
BEGIN {
    $VERSION = "1.01";
}
return 1 if caller;

# Package or program libraries, if appropriate.
# $LIBDIR = $ENV{'LIBDIR'} || '/usr/local/lib/sample';
# use lib qw($LIBDIR);
# require 'common.pl';

# Package name.
my $my_package = 'Sciurix';
# Program name and version.
my ($my_name, $my_version) = $RCS_Id =~ /: (.+).pl,v ([\d.]+)/;
# Tack '*' if it is not checked in into RCS.
$my_version .= '*' if length('$Locker:  $ ') > 12;

################ Command line parameters ################

use Getopt::Long 2.13;
use File::Path;

# Command line options.
my $verbose = 0;		# verbose processing
my $exclude = 1;
my $target = "cpan.iso";
my @tm = localtime(time);
my $id = sprintf("CPAN%04d%02d%02d", 1900+$tm[5], 1+$tm[4], $tm[3]),

# Development options (not shown with -help).
my $debug = 0;			# debugging
my $trace = 0;			# trace (show process)
my $test = 0;			# test mode.

# Process command line options.
app_options();

# Post-processing.
$trace |= ($debug || $test);

################ Presets ################

my $TMPDIR = $ENV{TMPDIR} || $ENV{TEMP} || '/usr/tmp';

################ The Process ################

my $tmpdir = $TMPDIR . "/cpan$$";

rmtree ([$tmpdir]);
mkpath ($tmpdir, $verbose, 0755);
END { rmtree ([$tmpdir]) if $tmpdir }

my $xlist = $tmpdir . "/CPAN-excluded-files";
open (XLIST, ">$xlist") or die ("$xlist: cannot create: $!\n");

use File::Find;

my $t_files;
my $t_skipped;
my $cpan = shift;

if ( -d $cpan ) {
    print STDERR ("Warning: missing CPAN.html. ",
		  "Is this really a CPAN mirror?\n")
      unless -f "$cpan/CPAN.html";
    print STDERR ("Building exclusion list\n") if $verbose;
    $t_files = $t_skipped = 0;
    traverse ($cpan, 0);
    print STDERR ("$cpan: $t_files files, $t_skipped skipped.\n") if $verbose;
}
else {
    die ("$cpan must be a directory\n");
}

# This one exceeds the Joliet limits... Sorry, Ilya.
print XLIST ("$cpan/authors/id/I/IL/ILYAZ/cperl-mode/rms-emacs-20.2-experimental-patch-narrow+dirfiles+skipcomment+skipsyntax\n");

close (XLIST);

open (README, ">$tmpdir/README.THIS-CD");
my $ts = localtime(time)."";
print README <<EOD;
This CD contains a subset of CPAN.

To fit CPAN on a CD, older versions of packages have been excluded. For a
complete list of excluded files, see CPAN-excluded-files.

This CD was generated by means of $my_name $VERSION on $ts.

With compliments,

----------------------------------------------------------------------------
Johan Vromans                                           jvromans\@squirrel.nl
Squirrel Consultancy                                Haarlem, the Netherlands
http://www.squirrel.nl                http://www.squirrel.nl/people/jvromans
PGP Key 2048/4783B14D     http://www.squirrel.nl/people/jvromans/pgpkey.html
----------------------- "Arms are made for hugging" ------------------------
EOD
close (README);

my @cmd = ("mkisofs",
	   "-r",		# rock ridge
	   "-J",		# joliet
	   "-o", $target,
	   "-V", $id,
	   ($trace ? "-v" : ()),
	   "-exclude-list", $xlist,
	   $cpan, $tmpdir);
print STDERR ("+ @cmd\n") if $trace;
system (@cmd);

exit 0;

################ Subroutines ################

sub traverse {
    my ($dir, $lvl) = @_;
    print STDERR ("+" x ($lvl+1), " ", $dir, " ") if $debug;
    my $dh = do { local *D; *D };
    opendir ($dh, $dir)
      or die ("$dir: $!\n");
    my @entries = readdir ($dh);
    closedir ($dh);
    my @dirs;
    my @files;

    foreach ( @entries ) {
	next if /^\.\.?$/;
	push (@files, $_) if -l "$dir/$_" || -f _;
	push (@dirs, $_) if -d _;
    }
    print STDERR (scalar @entries, "/", scalar @dirs, "/", scalar @files, "\n")
      if $debug;
    foreach ( sort @dirs ) {
	traverse ("$dir/$_", $lvl+1);
    }

    unless ( @files ) {
#	print ("$dir\n");
	return;
    }

    $t_files += @files;

    my %vv;

    my $flush = sub {
	return if $exclude;
	foreach ( sort keys %vv ) {
	    my ($name, $ext) = split /\0/;
	    (my $v = $vv{$_}) =~ s/ //g;
	    $name .= "-$v.$ext";
	    print STDERR (" " x ($lvl+2), "> $name\n") if $debug;
	    print STDERR ("ERROR: $dir/$name [$!]\n") unless -e "$dir/$name";
	    print XLIST ("$dir/$name\n");
	}
    };

    foreach ( sort @files ) {
	if ( /^(.+?)-(\d+.*)\.((tar(\.(z|Z|gz|bz2)))|readme|zip|tgz)$/ ) {
	    my ($name, $v, $ext) = ($1, $2, $3);
	    if ( $v =~ /^(\d+(\.\d+)*)$/ ) {
		print STDERR (" " x ($lvl+2), "= $name-$v.$ext\n") if $debug;
		my @v = split (/\./, $v);
		$v = join(".", map { (" " x (8 - length($_))).$_ } @v);
		if ( defined $vv{"$name\0$ext"} ) {
		    if ( $v gt $vv{"$name\0$ext"} ) {
			$t_skipped++;
			if ( $exclude ) {
			    (my $v = $vv{"$name\0$ext"}) =~ s/ //g;
			    print XLIST ("$dir/$name-$v.$ext\n");
			}
			$vv{"$name\0$ext"} = $v;
		    }
		}
		else {
		    $vv{"$name\0$ext"} = $v;
		}
	    }
	    else {
		print STDERR (" " x ($lvl+2), "* $name-$v.$ext\n") if $debug;
		print XLIST ("$dir/$name-$v.$ext\n") unless $exclude;
	    }
	}

	else {
	    print STDERR (" " x ($lvl+2), "? $_\n") if $debug;
	    print XLIST ("$dir/$_\n") unless $exclude;
	}
    }
    $flush->() if %vv;
}

################ Subroutines ################

sub app_options {
    my $help = 0;		# handled locally
    my $ident = 0;		# handled locally

    if ( !GetOptions(
		     'output=s'	=> \$target,
		     'volid=s'	=> \$id,
		     'ident'	=> \$ident,
		     'verbose'	=> \$verbose,
		     'trace'	=> \$trace,
		     'help|?'	=> \$help,
		     'debug'	=> \$debug,
		    ) or $help )
    {
	app_usage(2);
    }
    app_usage(1) unless @ARGV == 1;
    app_ident() if $ident;
}

sub app_ident {
    print STDERR ("This is $my_package $VERSION [$my_name $my_version]\n");
}

sub app_usage {
    my ($exit) = @_;
    app_ident();
    print STDERR <<EndOfUsage;
Usage: $0 [options] CPAN

CPAN is the main directory (the one that contains CPAN.html and such).

Options:
    -output XXX		the name of the ISO image (default: cpan.iso)
    -volid XXX		a volume id (default: CPANYYYYMMDD)
    -help		this message
    -ident		show identification
    -verbose		verbose information
EndOfUsage
    exit $exit if defined $exit && $exit != 0;
}

__END__

=head1 NAME

cpancd - generate an ISO image for a CPAN snapshot to burn on a CD

=head1 SYNOPSIS

sample [options] CPAN

 Options:
   -output XXX		the name of the ISO image (default: cpan.iso)
   -volid XXX		a volume id (default: CPANYYYYMMDD)
   -ident		show identification
   -help		brief help message
   -man                 full documentation
   -verbose		verbose information


=head1 DESCRIPTION

B<cpancd> creates an ISO image to burn on a CD. It is intended to be
used to create CD-rommable snapshots of CPAN.

It generates a subset of all CPAN files, by omitting older versions of
packages.

Currently (April 2001) the size of CPAN is about 880Mb, the generated
subset just over 630Mb.

B<cpancd> must be run with one argument, the CPAN main directory.
That is the directory that contains files like C<CPAN.html> and
C<MIRRORED.BY>,

=head1 THE EXCLUSION PROCESS

B<cpancd> processes all the files on CPAN, and analyzes files with
names in the form I<package>B<->I<nn>B<.>I<nn>B<.>I<ext>. If multiple
packages with different version numbers are detected, only the one
with the highest number is retained (by writing the others to the
exclusion list).

Recognized extensions are B<((tar(\.(z|Z|gz|bz2)))|readme|zip|tgz)>.

The exclusion process is not very aggressive, but currently sufficient
to reduce the size of the ISO image to fit an ordinary CD.

=head1 OPTIONS

=over 8

=item B<-output> I<image>

The name of the ISO image file. Default is C<cpan.iso> in the current
directory which may not be a good idea unless you have a lot of free
space there.

=item B<-volid> I<id>

An identification (volume ID) for the CD. Default is C<CPAN> with a
timestamp.

=item B<-help>

Print a brief help message and exits.

=item B<-ident>

Prints program identification.

=item B<-verbose>

More verbose information.

=item B<-trace>

More verbose information, including the verbose information from
B<mkisofs>.

=item I<file>

Input file(s).

=back

=head1 ENVIRONMENT

This program requires the C<mkisofs> program. This is part of the
B<cdrtools> package widely available. See, for example,
ftp://ftp.fokus.gmd.de/pub/unix/cdrecord .

A temporary directory is created in C</var/tmp>, or wherever your
C<TMPDIR> environment variable points to.

=head1 WARNING FOR NON-UNIX USERS

This program has been tested on Unix only. Since CPAN makes extensive
use of case sensitive filenames and symbolic links it may not be
feasible to make CPAN CDs on systems that do not fully support
these features.

The ISO image that is generated conforms to the ISO9660 standard, with
rationalized Rock Ridge extensions and a Joliet root. Note, however,
that the symbolic links will show as empty (and useless) files unless
your system uses the Rock Ridge extensions.

=head1 AUTHOR

Johan Vromans <jvromans@squirrel.nl>

=head1 COPYRIGHT AND DISCLAIMER

This program is Copyright 2001 by Johan Vromans.
This program is free software; you can redistribute it and/or
modify it under the terms of the Perl Artistic License or the
GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any
later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

If you do not have a copy of the GNU General Public License write to
the Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
MA 02139, USA.

=cut
